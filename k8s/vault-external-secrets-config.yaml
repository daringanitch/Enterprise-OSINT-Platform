# Vault Configuration for External Secrets Operator Integration
# This configures Vault policies and authentication for ESO

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-eso-config
  namespace: osint-platform
  labels:
    app: vault
    component: external-secrets-config
data:
  # Vault policy for OSINT Platform secrets access
  osint-platform-policy.hcl: |
    # Allow reading API keys
    path "secret/data/api-keys" {
      capabilities = ["read"]
    }
    
    # Allow reading database configuration
    path "secret/data/database-config" {
      capabilities = ["read"]
    }
    
    # Allow reading application configuration
    path "secret/data/app-config" {
      capabilities = ["read"]
    }
    
    # Allow reading MCP server configurations
    path "secret/data/mcp-*" {
      capabilities = ["read"]
    }
    
    # Allow reading compliance configurations
    path "secret/data/compliance-config" {
      capabilities = ["read"]
    }
    
    # Metadata access for secret discovery
    path "secret/metadata/*" {
      capabilities = ["list"]
    }
  
  # Kubernetes authentication configuration
  k8s-auth-config.sh: |
    #!/bin/bash
    # Script to configure Kubernetes authentication in Vault
    # Run this inside the Vault pod after deployment
    
    # Enable Kubernetes auth method
    vault auth enable kubernetes
    
    # Configure Kubernetes auth
    vault write auth/kubernetes/config \
        token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
        kubernetes_host="https://$KUBERNETES_PORT_443_TCP_ADDR:443" \
        kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    
    # Create role for OSINT platform
    vault write auth/kubernetes/role/osint-platform-role \
        bound_service_account_names=osint-vault-auth \
        bound_service_account_namespaces=osint-platform \
        policies=osint-platform-policy \
        ttl=24h
    
    # Create cluster-wide role (optional)
    vault write auth/kubernetes/role/osint-cluster-role \
        bound_service_account_names=osint-vault-auth \
        bound_service_account_namespaces=osint-platform \
        policies=osint-platform-policy,default \
        ttl=24h
  
  # Script to populate secrets in Vault
  populate-secrets.sh: |
    #!/bin/bash
    # Script to populate initial secrets in Vault
    # This should be run with appropriate API keys and credentials
    
    echo "Populating OSINT Platform secrets..."
    
    # API Keys (placeholder values - replace with real keys)
    vault kv put secret/api-keys \
        openai_api_key="${OPENAI_API_KEY:-placeholder}" \
        twitter_bearer_token="${TWITTER_BEARER_TOKEN:-placeholder}" \
        shodan_api_key="${SHODAN_API_KEY:-placeholder}" \
        virustotal_api_key="${VIRUSTOTAL_API_KEY:-placeholder}" \
        github_token="${GITHUB_TOKEN:-placeholder}" \
        linkedin_api_key="${LINKEDIN_API_KEY:-placeholder}" \
        reddit_api_key="${REDDIT_API_KEY:-placeholder}"
    
    # Database Configuration
    vault kv put secret/database-config \
        postgres_user="${POSTGRES_USER:-postgres}" \
        postgres_password="${POSTGRES_PASSWORD:-secure_password_$(date +%s)}" \
        postgres_host="${POSTGRES_HOST:-postgresql}" \
        postgres_port="${POSTGRES_PORT:-5432}" \
        postgres_database="${POSTGRES_DATABASE:-osint_audit}" \
        redis_host="${REDIS_HOST:-redis}" \
        redis_port="${REDIS_PORT:-6379}" \
        redis_db="${REDIS_DB:-0}"
    
    # Application Configuration
    vault kv put secret/app-config \
        jwt_secret_key="$(openssl rand -base64 32)" \
        vault_token="${VAULT_TOKEN:-dev-only-token}" \
        encryption_key="$(openssl rand -base64 32)" \
        session_secret="$(openssl rand -base64 24)" \
        webhook_secret="$(openssl rand -base64 16)"
    
    # MCP Server Configurations
    vault kv put secret/mcp-infrastructure \
        api_timeout="30" \
        rate_limit_per_minute="60" \
        cache_ttl_seconds="300"
    
    vault kv put secret/mcp-social \
        api_timeout="45" \
        rate_limit_per_minute="30" \
        cache_ttl_seconds="600"
    
    vault kv put secret/mcp-threat \
        api_timeout="60" \
        rate_limit_per_minute="20" \
        cache_ttl_seconds="1800"
    
    # Compliance Configuration
    vault kv put secret/compliance-config \
        gdpr_enabled="true" \
        ccpa_enabled="true" \
        pipeda_enabled="true" \
        data_retention_days="365" \
        audit_log_retention_days="2555"  # 7 years
    
    echo "Secrets populated successfully!"
  
  # Health check script for Vault-ESO integration
  health-check.sh: |
    #!/bin/bash
    # Health check script for Vault and External Secrets integration
    
    echo "Checking Vault External Secrets integration..."
    
    # Check Vault status
    if vault status > /dev/null 2>&1; then
        echo "✓ Vault is accessible"
    else
        echo "✗ Vault is not accessible"
        exit 1
    fi
    
    # Check Kubernetes auth method
    if vault auth list | grep -q kubernetes; then
        echo "✓ Kubernetes auth method enabled"
    else
        echo "✗ Kubernetes auth method not enabled"
        exit 1
    fi
    
    # Check policy exists
    if vault policy list | grep -q osint-platform-policy; then
        echo "✓ OSINT platform policy exists"
    else
        echo "✗ OSINT platform policy missing"
        exit 1
    fi
    
    # Check role configuration
    if vault read auth/kubernetes/role/osint-platform-role > /dev/null 2>&1; then
        echo "✓ OSINT platform role configured"
    else
        echo "✗ OSINT platform role not configured"
        exit 1
    fi
    
    # Check sample secret
    if vault kv get secret/app-config > /dev/null 2>&1; then
        echo "✓ Sample secrets accessible"
    else
        echo "✗ Sample secrets not accessible"
        exit 1
    fi
    
    echo "All checks passed!"

---
# Job to configure Vault for External Secrets
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-eso-setup
  namespace: osint-platform
  labels:
    app: vault
    component: external-secrets-setup
spec:
  template:
    metadata:
      labels:
        app: vault
        component: external-secrets-setup
    spec:
      serviceAccountName: osint-vault-auth
      restartPolicy: OnFailure
      containers:
      - name: vault-config
        image: vault:1.15
        command:
        - /bin/sh
        - -c
        - |
          # Wait for Vault to be ready
          until vault status; do
            echo "Waiting for Vault..."
            sleep 5
          done
          
          # Configure Vault authentication and policies
          echo "Configuring Vault for External Secrets..."
          
          # Create policy
          vault policy write osint-platform-policy - <<EOF
          $(cat /config/osint-platform-policy.hcl)
          EOF
          
          # Run Kubernetes auth setup
          /config/k8s-auth-config.sh
          
          # Populate initial secrets
          /config/populate-secrets.sh
          
          echo "Vault configuration complete!"
        env:
        - name: VAULT_ADDR
          value: "http://vault:8200"
        - name: VAULT_TOKEN
          value: "dev-only-token"
        - name: KUBERNETES_PORT_443_TCP_ADDR
          value: "kubernetes.default"
        volumeMounts:
        - name: config
          mountPath: /config
        - name: vault-token
          mountPath: /var/run/secrets/tokens
          readOnly: true
      volumes:
      - name: config
        configMap:
          name: vault-eso-config
          defaultMode: 0755
      - name: vault-token
        projected:
          sources:
          - serviceAccountToken:
              audience: vault
              expirationSeconds: 7200
              path: vault-token

---
# Service to monitor External Secrets status
apiVersion: v1
kind: Service
metadata:
  name: external-secrets-webhook
  namespace: osint-platform
  labels:
    app: external-secrets
    component: webhook
spec:
  selector:
    app: external-secrets
    component: webhook
  ports:
  - name: webhook
    port: 9443
    targetPort: 9443
  type: ClusterIP