---
# Vault Development Deployment (In-memory storage)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault
  namespace: osint-platform
  labels:
    app: vault
    component: secret-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
        component: secret-management
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 100
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: vault
          image: hashicorp/vault:1.15.4
          imagePullPolicy: IfNotPresent
          args:
            - "server"
            - "-dev"
            - "-dev-listen-address=0.0.0.0:8200"
          env:
            - name: VAULT_DEV_ROOT_TOKEN_ID
              value: "dev-only-token"
            - name: VAULT_DEV_LISTEN_ADDRESS
              value: "0.0.0.0:8200"
            - name: VAULT_ADDR
              value: "http://localhost:8200"
          ports:
            - name: vault-port
              containerPort: 8200
              protocol: TCP
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "250m"
          readinessProbe:
            httpGet:
              path: /v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204
              port: 8200
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /v1/sys/health?standbyok=true
              port: 8200
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 100

---
# Vault Service
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: osint-platform
  labels:
    app: vault
    component: secret-management
spec:
  type: ClusterIP
  ports:
    - name: vault-port
      port: 8200
      targetPort: 8200
      protocol: TCP
  selector:
    app: vault

---
# Vault Initialization Job
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init-dev
  namespace: osint-platform
  labels:
    app: vault-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-vault
          image: busybox:1.36
          command: ['sh', '-c']
          args:
            - |
              until nc -z vault 8200; do
                echo "Waiting for vault..."
                sleep 2
              done
              echo "Vault is ready"
      containers:
        - name: vault-init
          image: hashicorp/vault:1.15.4
          env:
            - name: VAULT_ADDR
              value: "http://vault:8200"
            - name: VAULT_TOKEN
              value: "dev-only-token"
          command:
            - /bin/sh
            - -c
            - |
              # Wait for Vault to be ready
              sleep 10
              
              # Login with dev token
              export VAULT_TOKEN="dev-only-token"
              
              # Enable KV secrets engine v2
              vault secrets enable -version=2 -path=secret kv || echo "KV already enabled"
              
              # Enable AppRole auth method
              vault auth enable approle || echo "AppRole already enabled"
              
              # Create OSINT policy
              vault policy write osint-admin - <<EOF
              # Full access to secret/osint path
              path "secret/data/osint/*" {
                capabilities = ["create", "read", "update", "delete", "list"]
              }
              
              path "secret/metadata/osint/*" {
                capabilities = ["list", "read", "delete"]
              }
              
              # API key management paths
              path "secret/data/api-keys/*" {
                capabilities = ["create", "read", "update", "delete", "list"]
              }
              
              path "secret/metadata/api-keys/*" {
                capabilities = ["list", "read", "delete"]
              }
              EOF
              
              # Create AppRole for OSINT application
              vault write auth/approle/role/osint-app \
                bind_secret_id=true \
                token_ttl=1h \
                token_max_ttl=4h \
                token_policies="osint-admin" \
                token_bound_cidrs="10.0.0.0/8" || echo "AppRole already exists"
              
              # Get Role ID and Secret ID
              ROLE_ID=$(vault read -field=role_id auth/approle/role/osint-app/role-id)
              SECRET_ID=$(vault write -field=secret_id -f auth/approle/role/osint-app/secret-id)
              
              echo "Vault initialization completed!"
              echo "Role ID: $ROLE_ID"
              echo "Secret ID: $SECRET_ID"
              
              # Store demo API keys in Vault
              vault kv put secret/api-keys/openai key="demo-key-replace-with-real-key"
              vault kv put secret/api-keys/shodan key="demo-key-replace-with-real-key" 
              vault kv put secret/api-keys/twitter token="demo-token-replace-with-real-token"
              vault kv put secret/api-keys/virustotal key="demo-key-replace-with-real-key"
              
              echo "Demo API keys stored in Vault"
              
              # Store credentials in a configmap for the application
              kubectl create configmap vault-credentials \
                --from-literal=role-id="$ROLE_ID" \
                --from-literal=secret-id="$SECRET_ID" \
                --from-literal=root-token="dev-only-token" \
                --namespace=osint-platform \
                --dry-run=client -o yaml | kubectl apply -f -
              
              echo "Credentials stored in vault-credentials ConfigMap"