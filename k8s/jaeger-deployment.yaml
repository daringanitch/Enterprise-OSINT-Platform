# Jaeger Deployment for OSINT Platform Distributed Tracing
# Provides trace collection, storage, and visualization

---
apiVersion: v1
kind: Namespace
metadata:
  name: observability
  labels:
    name: observability

---
# Jaeger All-in-One Deployment (for development/testing)
# For production, use the Jaeger Operator with separate components
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: observability
  labels:
    app: jaeger
    component: all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
        component: all-in-one
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.50
        ports:
        - containerPort: 5775
          protocol: UDP
          name: zk-compact-trft
        - containerPort: 6831
          protocol: UDP
          name: jg-compact-trft
        - containerPort: 6832
          protocol: UDP
          name: jg-binary-trft
        - containerPort: 5778
          protocol: TCP
          name: config-rest
        - containerPort: 16686
          protocol: TCP
          name: jaeger-ui
        - containerPort: 14268
          protocol: TCP
          name: jg-collector
        - containerPort: 14250
          protocol: TCP
          name: grpc-collector
        - containerPort: 9411
          protocol: TCP
          name: zipkin
        - containerPort: 4317
          protocol: TCP
          name: otlp-grpc
        - containerPort: 4318
          protocol: TCP
          name: otlp-http
        env:
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: SPAN_STORAGE_TYPE
          value: "memory"  # Use badger for persistence
        - name: QUERY_BASE_PATH
          value: "/jaeger"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 30
          periodSeconds: 30

---
# Service for Jaeger
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: observability
  labels:
    app: jaeger
spec:
  selector:
    app: jaeger
  type: ClusterIP
  ports:
  - name: jg-compact-trft
    port: 6831
    protocol: UDP
    targetPort: 6831
  - name: jaeger-ui
    port: 16686
    protocol: TCP
    targetPort: 16686
  - name: jg-collector
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: grpc-collector
    port: 14250
    protocol: TCP
    targetPort: 14250
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: otlp-grpc
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: otlp-http
    port: 4318
    protocol: TCP
    targetPort: 4318

---
# Jaeger Query Service (for UI)
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: observability
  labels:
    app: jaeger
    component: query
spec:
  selector:
    app: jaeger
  type: NodePort
  ports:
  - name: query-http
    port: 80
    protocol: TCP
    targetPort: 16686
    nodePort: 30686  # Access via http://localhost:30686

---
# Ingress for Jaeger UI (optional)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger-ui
  namespace: observability
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - host: localhost
    http:
      paths:
      - path: /jaeger(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: jaeger-query
            port:
              number: 80

---
# Production Jaeger with Persistence (commented out)
# Uncomment and configure for production use
#
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: jaeger-collector
#   namespace: observability
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: jaeger
#       component: collector
#   template:
#     metadata:
#       labels:
#         app: jaeger
#         component: collector
#     spec:
#       containers:
#       - name: jaeger-collector
#         image: jaegertracing/jaeger-collector:1.50
#         ports:
#         - containerPort: 14268
#         - containerPort: 14250
#         - containerPort: 4317
#         - containerPort: 4318
#         env:
#         - name: SPAN_STORAGE_TYPE
#           value: elasticsearch
#         - name: ES_SERVER_URLS
#           value: http://elasticsearch:9200
#         - name: COLLECTOR_OTLP_ENABLED
#           value: "true"
#         resources:
#           requests:
#             memory: "1Gi"
#             cpu: "500m"
#           limits:
#             memory: "2Gi"
#             cpu: "1000m"

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: jaeger-metrics
  namespace: observability
  labels:
    app: jaeger
spec:
  selector:
    matchLabels:
      app: jaeger
  endpoints:
  - port: admin-http
    interval: 30s
    path: /metrics

---
# HorizontalPodAutoscaler for Jaeger (production)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: jaeger-collector-hpa
  namespace: observability
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jaeger-collector
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80