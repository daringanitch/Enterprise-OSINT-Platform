# External Secrets Operator Setup for OSINT Platform
# Provides secure integration between Kubernetes and HashiCorp Vault

---
# Install External Secrets Operator via Helm (run manually):
# helm repo add external-secrets https://charts.external-secrets.io
# helm install external-secrets external-secrets/external-secrets -n external-secrets-system --create-namespace

apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system
  labels:
    name: external-secrets-system

---
# SecretStore for Vault integration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: osint-platform
spec:
  provider:
    vault:
      server: "http://vault:8200"
      path: "secret"
      version: "v2"
      auth:
        # Use Kubernetes service account token for Vault authentication
        kubernetes:
          mountPath: "kubernetes"
          role: "osint-platform-role"
          serviceAccountRef:
            name: osint-vault-auth

---
# Service Account for Vault authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: osint-vault-auth
  namespace: osint-platform
  labels:
    app: osint-platform
    component: vault-auth

---
# ClusterRole for Vault authentication
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: osint-vault-auth
rules:
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]

---
# ClusterRoleBinding for Vault authentication
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: osint-vault-auth
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: osint-vault-auth
subjects:
- kind: ServiceAccount
  name: osint-vault-auth
  namespace: osint-platform

---
# ExternalSecret for API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: osint-api-keys
  namespace: osint-platform
spec:
  refreshInterval: 300s  # Refresh every 5 minutes
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: osint-api-keys
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app: osint-platform
          managed-by: external-secrets
      data:
        openai-api-key: "{{ .openai_api_key }}"
        twitter-bearer-token: "{{ .twitter_bearer_token }}"
        shodan-api-key: "{{ .shodan_api_key }}"
        virustotal-api-key: "{{ .virustotal_api_key }}"
        github-token: "{{ .github_token }}"
        linkedin-api-key: "{{ .linkedin_api_key }}"
        reddit-api-key: "{{ .reddit_api_key }}"
  data:
  - secretKey: openai_api_key
    remoteRef:
      key: api-keys
      property: openai_api_key
  - secretKey: twitter_bearer_token
    remoteRef:
      key: api-keys
      property: twitter_bearer_token
  - secretKey: shodan_api_key
    remoteRef:
      key: api-keys
      property: shodan_api_key
  - secretKey: virustotal_api_key
    remoteRef:
      key: api-keys
      property: virustotal_api_key
  - secretKey: github_token
    remoteRef:
      key: api-keys
      property: github_token
  - secretKey: linkedin_api_key
    remoteRef:
      key: api-keys
      property: linkedin_api_key
  - secretKey: reddit_api_key
    remoteRef:
      key: api-keys
      property: reddit_api_key

---
# ExternalSecret for Database Configuration
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: osint-database-config
  namespace: osint-platform
spec:
  refreshInterval: 600s  # Refresh every 10 minutes
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: osint-database-config
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app: osint-platform
          managed-by: external-secrets
      data:
        postgres-url: "postgresql://{{ .postgres_user }}:{{ .postgres_password }}@{{ .postgres_host }}:{{ .postgres_port }}/{{ .postgres_database }}"
        postgres-user: "{{ .postgres_user }}"
        postgres-password: "{{ .postgres_password }}"
        postgres-host: "{{ .postgres_host }}"
        postgres-port: "{{ .postgres_port }}"
        postgres-database: "{{ .postgres_database }}"
        redis-url: "redis://{{ .redis_host }}:{{ .redis_port }}/{{ .redis_db }}"
  data:
  - secretKey: postgres_user
    remoteRef:
      key: database-config
      property: postgres_user
  - secretKey: postgres_password
    remoteRef:
      key: database-config
      property: postgres_password
  - secretKey: postgres_host
    remoteRef:
      key: database-config
      property: postgres_host
  - secretKey: postgres_port
    remoteRef:
      key: database-config
      property: postgres_port
  - secretKey: postgres_database
    remoteRef:
      key: database-config
      property: postgres_database
  - secretKey: redis_host
    remoteRef:
      key: database-config
      property: redis_host
  - secretKey: redis_port
    remoteRef:
      key: database-config
      property: redis_port
  - secretKey: redis_db
    remoteRef:
      key: database-config
      property: redis_db

---
# ExternalSecret for Application Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: osint-app-secrets
  namespace: osint-platform
spec:
  refreshInterval: 900s  # Refresh every 15 minutes
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: osint-app-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app: osint-platform
          managed-by: external-secrets
      data:
        jwt-secret-key: "{{ .jwt_secret_key }}"
        vault-token: "{{ .vault_token }}"
        encryption-key: "{{ .encryption_key }}"
        session-secret: "{{ .session_secret }}"
        webhook-secret: "{{ .webhook_secret }}"
  data:
  - secretKey: jwt_secret_key
    remoteRef:
      key: app-config
      property: jwt_secret_key
  - secretKey: vault_token
    remoteRef:
      key: app-config
      property: vault_token
  - secretKey: encryption_key
    remoteRef:
      key: app-config
      property: encryption_key
  - secretKey: session_secret
    remoteRef:
      key: app-config
      property: session_secret
  - secretKey: webhook_secret
    remoteRef:
      key: app-config
      property: webhook_secret

---
# ClusterSecretStore for cluster-wide secrets (optional)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-cluster-store
spec:
  provider:
    vault:
      server: "http://vault.vault-system:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "osint-cluster-role"
          serviceAccountRef:
            name: osint-vault-auth
            namespace: osint-platform

---
# Monitoring for External Secrets
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: external-secrets-metrics
  namespace: external-secrets-system
  labels:
    app: external-secrets
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# PodMonitor for External Secrets Controller
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: external-secrets-controller
  namespace: external-secrets-system
  labels:
    app: external-secrets
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
  podMetricsEndpoints:
  - port: metrics
    interval: 30s
    path: /metrics